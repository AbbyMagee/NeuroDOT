function Anat=Convert_FSLR_WB_Ctx2mat(pt,pn,params)
%
% This function loads pertinent cortex surface files generated by
% FreeSurfer and the Workbench command FSLR pipeline and organizes them into
% a variable called Anat for efficient visualizations.
% Inputs: 
%   pt          The participant name 
%   pn          The path to the folder containing the fsLR directory 
%                   that contains these files output by FS. Must end in
%                   slash.

%% Parameters and Initialization
if ~exist('params','var'),params=struct;end
if ~exist('getMeas','var'),getMeas=0;end

if ~isfield(params, 'res'), params.res = 'high'; res = '164';end

if strcmp(params.res, 'high')
    res = '164';
elseif strcmp(params.res, 'low')
    res = '32';
end

here=pwd;
cd(pn)


%% Pial Node files
if strcmp(res, '164')
    Lname=dir('*.L.pial.164*');
    temp=gifti(Lname.name);
    Anat.CtxL.nodes=double(temp.vertices);
    Anat.CtxL.elements=double(temp.faces);
    Rname=dir('*.R.pial.164*');
    temp=gifti(Rname.name);
    Anat.CtxR.nodes=double(temp.vertices);
    Anat.CtxR.elements=double(temp.faces);
elseif strcmp (res, '32')
    Lname=dir('*.L.pial.32*');
    temp=gifti(Lname.name);
    Anat.CtxL.nodes=double(temp.vertices);
    Anat.CtxL.elements=double(temp.faces);
    Rname=dir('*.R.pial.32*');
    temp=gifti(Rname.name);
    Anat.CtxR.nodes=double(temp.vertices);
    Anat.CtxR.elements=double(temp.faces);
end


%% Inflated Node files
if strcmp(res, '164')
    Lname=dir('*.L.inflated.164*');
    temp=gifti(Lname.name);
    Anat.CtxL.Inodes=double(temp.vertices);
    Rname=dir('*.R.inflated.164*');
    temp=gifti(Rname.name);
    Anat.CtxR.Inodes=double(temp.vertices);
elseif strcmp (res, '32')
    Lname=dir('*.L.inflated.32*');
    temp=gifti(Lname.name);
    Anat.CtxL.Inodes=double(temp.vertices);
    Rname=dir('*.R.inflated.32*');
    temp=gifti(Rname.name);
    Anat.CtxR.Inodes=double(temp.vertices);
end


%% Very Inflated Node files
if strcmp(res, '164')
    Lname=dir('*.L.very_inflated.164*');
    temp=gifti(Lname.name);
    Anat.CtxL.VInodes=double(temp.vertices);
    Rname=dir('*.R.very_inflated.164*');
    temp=gifti(Rname.name);
    Anat.CtxR.VInodes=double(temp.vertices);
elseif strcmp (res, '32')
    Lname=dir('*.L.very_inflated.32*');
    temp=gifti(Lname.name);
    Anat.CtxL.VInodes=double(temp.vertices);
    Rname=dir('*.R.very_inflated.32*');
    temp=gifti(Rname.name);
    Anat.CtxR.VInodes=double(temp.vertices);
end


%% Flat Node files
if strcmp(res, '164')
    Lname=dir('*.L.flat.164*');
    temp = gifti(Lname.name);
    Anat.CtxL.Fnodes = double(temp.vertices);
    Anat.CtxL.elements=double(temp.faces);
    Rname=dir('*.R.flat.164*');
    temp = gifti(Rname.name);
    Anat.CtxR.Fnodes = double(temp.vertices);
    Anat.CtxR.elements=double(temp.faces);
elseif strcmp (res, '32')
    Lname=dir('*.L.flat.32*');
    temp = gifti(Lname.name);
    Anat.CtxL.Fnodes = double(temp.vertices);
    Anat.CtxL.elements=double(temp.faces);
    Rname=dir('*.R.flat.32*');
    temp = gifti(Rname.name);
    Anat.CtxR.Fnodes = double(temp.vertices);
    Anat.CtxR.elements=double(temp.faces);
end

%% Curvature files
if strcmp(res, '164')
    Lname=dir('*.L.curvature.164*');
    temp = gifti(Lname.name);
    Anat.CtxL.region = double(temp.cdata);
    Anat.CtxL.region = round(((Anat.CtxL.region/max(Anat.CtxL.region(:))) + 1)*100)
    Rname=dir('*.R.curvature.164*');
    temp = gifti(Rname.name);
    Anat.CtxR.region = double(temp.cdata);
    Anat.CtxR.region = round(((Anat.CtxR.region/max(Anat.CtxR.region(:))) + 1)*100)
elseif strcmp (res, '32')
    Lname=dir('*.L.curvature.32*');
    temp = gifti(Lname.name);
    Anat.CtxL.region = double(temp.cdata);
    Anat.CtxL.region = round(((Anat.CtxL.region/max(Anat.CtxL.region(:))) + 1)*100)
    Rname=dir('*.R.curvature.32*');
    temp = gifti(Rname.name);
    Anat.CtxR.region = double(temp.cdata);
    Anat.CtxR.region = round(((Anat.CtxR.region/max(Anat.CtxR.region(:))) + 1)*100)
end

%% Return to original directory
save([pt,'_', res,'k_ctx'], 'Anat');
cd(here)

